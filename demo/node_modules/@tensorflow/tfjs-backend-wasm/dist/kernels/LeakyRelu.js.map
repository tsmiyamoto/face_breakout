{"version":3,"file":"LeakyRelu.js","sourceRoot":"","sources":["../../src/kernels/LeakyRelu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,EAA2B,SAAS,EAA+C,IAAI,EAAC,MAAM,uBAAuB,CAAC;AAI7H,OAAO,EAAC,QAAQ,EAAC,MAAM,SAAS,CAAC;AAEjC,IAAI,QAC0E,CAAC;AAE/E,SAAS,SAAS,CAAC,OAAoB;IACrC,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE;QACxD,QAAQ;QACR,QAAQ;QACR,QAAQ;QACR,QAAQ;KACT,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,SAAS,CACrB,IAC0E;IAE5E,MAAM,EAAC,MAAM,EAAE,EAAC,CAAC,EAAC,EAAE,KAAK,EAAE,EAAC,KAAK,EAAC,EAAE,OAAO,EAAC,GAAG,IAAI,CAAC;IAEpD,MAAM,GAAG,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;IAC/C,8EAA8E;IAC9E,YAAY;IACZ,MAAM,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;IAEnD,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;QACrC,MAAM,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;QACnD,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;KAChD;IAED,OAAO,GAAG,CAAC;AACb,CAAC;AAED,MAAM,CAAC,MAAM,eAAe,GAAiB;IAC3C,UAAU,EAAE,SAAS;IACrB,WAAW,EAAE,MAAM;IACnB,SAAS;IACT,UAAU,EAAE,SAA6B;CAC1C,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {CppDType} from './types';\n\nlet wasmFunc: (\n    xId: number, dtype: number, leakyreluAlpha: number, outId: number) => void;\n\nfunction setupFunc(backend: BackendWasm): void {\n  wasmFunc = backend.wasm.cwrap(LeakyRelu, null /* void */, [\n    'number',  // x_id\n    'number',  // dtype\n    'number',  // leakyrelu_alpha\n    'number',  // out_id\n  ]);\n}\n\nexport function leakyRelu(\n    args:\n        {inputs: LeakyReluInputs, attrs: LeakyReluAttrs, backend: BackendWasm}):\n    TensorInfo {\n  const {inputs: {x}, attrs: {alpha}, backend} = args;\n\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  // According to TF API, LeakyRelu returns float32 when input is either float32\n  // or int32.\n  const out = backend.makeOutput(x.shape, 'float32');\n\n  if (util.sizeFromShape(x.shape) !== 0) {\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    wasmFunc(xId, CppDType[x.dtype], alpha, outId);\n  }\n\n  return out;\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'wasm',\n  setupFunc,\n  kernelFunc: leakyRelu as {} as KernelFunc,\n};\n"]}